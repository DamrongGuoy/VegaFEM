name: Build

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  VCPKG_VERSION: 14e7bb4ae24616ec54ff6b2f6ef4e8659434ea44

jobs:
  Linux:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Intel Apt repository
      timeout-minutes: 1
      run: |
        wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo apt update
    - name: Cache Intel oneAPI
      id: cache-intel
      uses: actions/cache@v3
      with:
        path: /opt/intel/
        key: ${{ runner.os }}-${{ hashFiles('GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB') }}
    - name: Install Intel oneAPI
      timeout-minutes: 5
      if: steps.cache-intel.outputs.cache-hit != 'true'
      run: sudo apt install -y intel-oneapi-common-vars intel-oneapi-mkl intel-oneapi-mkl-devel intel-oneapi-tbb intel-oneapi-tbb-devel #devel needed for cmake and headers
    - name: Setup Intel oneAPI environment
      run: |
        source /opt/intel/oneapi/setvars.sh
        printenv >> $GITHUB_ENV
    - name: Setup ninja
      uses: seanmiddleditch/gha-setup-ninja@master
    - name: System dependencies
      run: |
        sudo apt install -y libomp-dev
        sudo apt install -y clang
        sudo apt install -y autoconf-archive #mpfr
        sudo apt install -y libopengl-dev libglu-dev libx11-dev libxrandr-dev libxi-dev libxxf86vm-dev #freeglut
    - name: Setup vcpkg
      id: setup-vcpkg
      uses: friendlyanon/setup-vcpkg@v1
      with: 
        committish: master
    - name: Run vcpkg
      shell: bash
      run: vcpkg install opengl glui glew cgal openblas eigen3 intel-mkl
    - name: Configure CMake
      env:
        CC: clang
        CXX: clang++
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        mkdir build
        cd build
        cmake -G Ninja -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake -DMKL_DIR=/opt/intel/oneapi/mkl/latest/lib/cmake/mkl/ -S ../ -B ./
    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        ctest -C ${{env.BUILD_TYPE}}
    - name: Upload build folder
      uses: actions/upload-artifact@v3
      with:
        name: Linux-build-dir
        path: ${{github.workspace}}/build
        retention-days: 2

  Windows:
    runs-on: windows-latest
    env:
      WINDOWS_BASEKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18599/w_BaseKit_p_2022.1.3.210_offline.exe
      WINDOWS_CPP_COMPONENTS: "intel.oneapi.win.mkl.devel:intel.oneapi.win.tbb.devel"
      VCPKG_DEFAULT_TRIPLET: x64-windows
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Setup ninja
      uses: seanmiddleditch/gha-setup-ninja@master
    - name: Restore cache Intel oneAPI
      id: cache-intel
      uses: actions/cache@v3
      with:
        path: 'C:\Program Files (x86)\Intel\oneAPI'
        key: ${{ runner.os }}-2022.1.3.210
    - name: Install Intel oneAPI
      timeout-minutes: 25
      if: steps.cache-intel.outputs.cache-hit != 'true'
      run: scripts/install_windows.bat $env:WINDOWS_BASEKIT_URL $env:WINDOWS_CPP_COMPONENTS
    - name: Setup Intel oneAPI environment
      shell: cmd  
      run: |
        call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat"
    - name: Setup vcpkg
      id: setup-vcpkg
      uses: friendlyanon/setup-vcpkg@v1
      with: 
        committish: ${{ env.VCPKG_VERSION }}
    - name: Run vcpkg
      shell: cmd
      run: |
        REM call "C:\Program Files (x86)\Intel\oneAPI\setvars-vcvarsall.bat" vs2022
        REM call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat"
        set "MKL_DIR=C:\Program Files (x86)\Intel\oneAPI\mkl\2022.0.3\lib\cmake\mkl"
        vcpkg.exe install intel-mkl 
        vcpkg.exe install opengl glui glew cgal openblas eigen3 
    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1
    - name: Configure CMake
      shell: cmd
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        call "C:\Program Files (x86)\Intel\oneAPI\setvars-vcvarsall.bat" vs2022
        call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat"
        set "MKL_DIR=C:\Program Files (x86)\Intel\oneAPI\mkl\2022.0.3\lib\cmake\mkl"
        cmake.exe -G Ninja -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE="${{github.workspace}}\vcpkg\scripts\buildsystems\vcpkg.cmake" -DMKL_DIR="C:\Program Files (x86)\Intel\oneAPI\mkl\2022.0.3\lib\cmake\mkl" -S ${{github.workspace}} -B ${{github.workspace}}\build
    - name: Build
      # Build your program with the given configuration
      run: cmake.exe --build ${{github.workspace}}\build --config ${{env.BUILD_TYPE}}
    - name: Upload build folder
      uses: actions/upload-artifact@v3
      with:
        name: Windows-build-dir
        path: ${{github.workspace}}/build
        retention-days: 2